<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans.xsd 
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx.xsd"
	default-lazy-init="false">

	 <!-- 加载配置属性文件 
	<context:property-placeholder ignore-unresolvable="true" location="/WEB-INF/conf/offline/props/jdbc.properties,/WEB-INF/conf/offline/props/misc.properties"/>-->
	<bean id="propertyConfigurer"  class="com.bioeh.sp.hm.web.PropertyConfigurer">    
        <property name="locations">    
            <list>    
                <value>/WEB-INF/conf/offline/props/jdbc.properties</value>
                <value>/WEB-INF/conf/offline/props/misc.properties</value>
                <value>/WEB-INF/conf/offline/props/mail.properties</value>
            </list>    
        </property>    
    </bean>   
	
	<!-- 开启注解 在java中使用@Autowired或者@Resource注解方式进行装配，这两个注解的区别是：@Autowird默认按类型装配 @Resource默认按名称装配，当找不到与名称匹配的bean才会按类型装配 -->
	<context:annotation-config />
	<!-- 定义扫描包路径 它可以在类路径地下寻找标注了@Component、@Service、@Controller、@Repository注解的类， 并把这些类纳入进spring容易管理中 -->
	<context:component-scan base-package="com.bioeh.sp.hm.wx.*,com.bioeh.sp.hm.bsp.biz.*.business,com.bioeh.sp.hm.bsp.biz.*.service,com.bioeh.mongo.tool.service.*,com.bioeh.hm.servive.record.biz.service.*,com.bioeh.sp.hm.*.biz.service.*,com.bioeh.sp.hm.*.biz.service.*,com.bioeh.mongo.tool.service.*,com.bioeh.sp.hm.recordIndex.*" />


	<!-- AOP自动封装 Advisor auto proxy 该类实现了接口BeanPostProcessor, 自动代理同一个或者相关的上下文中出现的Advisor中的Advice -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />

	<!-- 数据源配置, 使用 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.minIdle}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<property name="dbType" value="mysql"></property>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="maxOpenPreparedStatements" value="100" />
		
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="1800" /> <!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat,wall,log4j" />
	</bean>

	<!-- 简单jdbc对象初始化 -->
	<bean id = "simpleJdbc" class="com.bioeh.sp.hm.dal.SimpleJdbc">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id = "commonDao" class="com.bioeh.sp.hm.dal.CommonDaoImpl">
		<property name="simpleJdbc" ref="simpleJdbc" />
	</bean>
	
	<!-- 使用JDBC事务 -->  
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>
	<bean id="txInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="txManager" />
		<property name="transactionAttributeSource">
			<bean
				class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource" />
		</property>
	</bean>  
    <bean id="transactionAdvisor" class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
		<property name="transactionInterceptor" ref="txInterceptor" />
	</bean>
	
	<!--线程池 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">  
        <property name="corePoolSize" value="30" />  
        <property name="maxPoolSize" value="50" />  
        <property name="queueCapacity" value="20" />  
        <property name="keepAliveSeconds" value="2000" />  
        <property name="rejectedExecutionHandler">  
            <bean class="java.util.concurrent.ThreadPoolExecutor$AbortPolicy" />  
        </property>  
    </bean>
    
</beans>
